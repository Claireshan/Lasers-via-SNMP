#Sample Logstash configuration for creating a simple
# Beats -> Logstash -> Elasticsearch pipeline.


input {
  snmp {
    hosts => [
      {host => "udp:ip/port" community => ""},
#      {host => "udp:ip/port" community => ""},
      {host => "udp:ip/port" community => ""}
    ]
    mib_paths => ["/etc/logstash/junos-mibs"]
    oid_path_length => 2
    tables => [
      {
        name => "interfaces"
        columns => [
          "1.3.6.1.2.1.2.2.1.1",
          "1.3.6.1.2.1.2.2.1.2",
          "1.3.6.1.2.1.31.1.1.1.1",
          "1.3.6.1.4.1.2636.3.60.1.1.1.1.5",
          "1.3.6.1.4.1.2636.3.60.1.1.1.1.7",
          "1.3.6.1.4.1.2636.3.60.1.1.1.1.11",
          "1.3.6.1.4.1.2636.3.60.1.1.1.1.12",
          "1.3.6.1.4.1.2636.3.60.1.1.1.1.19",
          "1.3.6.1.4.1.2636.3.60.1.1.1.1.20"
        ]
      }
    ]
    interval => 10800
  }
}

filter {
  mutate {
    add_field => { "cpe_ip" => "%{[host]}" }
  }

  ruby {
    code => '
      fieldName = "interfaces"
      a = []
     mappings = {
        "jnxDomCurrentTxLaserOutputPowerHighWarningThreshold" => "tx_power_high_threshold_in_dbm",
        "jnxDomCurrentTxLaserOutputPower" => "tx_power_in_dbm",
        "jnxDomCurrentTxLaserOutputPowerLowWarningThreshold" => "tx_power_low_threshold_in_dbm",
        "jnxDomCurrentRxLaserPowerHighWarningThreshold" => "rx_power_high_threshold_in_dbm",
        "jnxDomCurrentRxLaserPower" => "rx_power_in_dbm",
        "jnxDomCurrentRxLaserPowerLowWarningThreshold" => "rx_power_low_threshold_in_dbm"
      }
      event.get(fieldName).each { |interface|
        if interface.include? "jnxDomCurrentRxLaserPower" and interface["jnxDomCurrentRxLaserPower"] != 0
          interface["jnxDomCurrentRxLaserPower"] *= 0.01
          interface["jnxDomCurrentTxLaserOutputPower"] *= 0.01
          interface["jnxDomCurrentRxLaserPowerHighWarningThreshold"] *= 0.01
          interface["jnxDomCurrentTxLaserOutputPowerHighWarningThreshold"] *= 0.01
          interface["jnxDomCurrentRxLaserPowerLowWarningThreshold"] *= 0.01
          interface["jnxDomCurrentTxLaserOutputPowerLowWarningThreshold"] *= 0.01
          interface.map {|k, v| [mappings[k], v] }.to_h
#          interface.transform_keys(&mappings.method(:[]))
          a << interface
        end
      }
      event.set(fieldName, a)
    '
  }

  date {
    timezone => "Africa/Kampala"
    match => ["timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss", "ISO8601"]
  }
}

output {
 file{
   path => "./powerlevel-logs/powerlevels.txt"
   write_behavior => append
}
  stdout { codec => rubydebug }
}